@inherits ModalBase

@inject IMapper _mapper;

<div class="modal @CssHelper.SetIsActive(_isVisible)">
    <div class="modal-background"></div>
    <div class="modal-card">
        <header class="modal-card-head">
            <p class="modal-card-title">Edytuj posumowanie roku @_absencesSummary.Year</p>
            <button class="delete" aria-label="close" @onclick="ChangeVisibility"></button>
        </header>
        <EditForm EditContext="@_editContext" OnSubmit="@OnSubmit">
            <section class="modal-card-body">
                <DataAnnotationsValidator />
                <div class="field">
                    <label class="label">Ilośc przysługującego urlopu (dni)</label>
                    <div class="control">
                        <InputNumber class="input" @bind-Value="_absencesSummary.PTODays" />
                        <div class="help is-danger">
                            <ValidationMessage For="@(() => _absencesSummary.PTODays)" />
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label class="label">Godzin wykorzystanego urlopu</label>
                    <div class="control">
                        <InputDate Type="InputDateType.Time" class="input" @bind-Value="_absencesSummary.PTOTimeUsed" />
                        <div class="help is-danger">
                            <ValidationMessage For="@(() => _absencesSummary.PTOTimeUsed)" />
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label class="label">Godzin pozostałego urlopu z zeszłego roku</label>
                    <div class="control">
                        <InputDate Type="InputDateType.Time" class="input" @bind-Value="_absencesSummary.PTOTimeLeftFromPreviousYear" />
                        <div class="help is-danger">
                            <ValidationMessage For="@(() => _absencesSummary.PTOTimeLeftFromPreviousYear)" />
                        </div>
                    </div>
                </div>
            </section>
            <footer class="modal-card-foot">
                <button class="button is-primary @CssHelper.SetIsLoading(_isLoadingSubmit)" type="submit">Zapisz</button>
                <button class="button is-warning @CssHelper.SetIsLoading(_isLoadingRecalculate)">Przelicz</button>
                <button class="button" @onclick="ChangeVisibility">Anuluj</button>
            </footer>
        </EditForm>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback<AbsencesSummaryEditViewModel> EditAction { get; set; }
    [Parameter]
    public EventCallback<AbsencesSummaryEditViewModel> RecalculateAction { get; set; }

    private AbsencesSummaryEditViewModel _absencesSummary;
    private bool _isLoadingSubmit;
    private bool _isLoadingRecalculate;
    private EditContext _editContext;

    protected override void OnInitialized()
    {
        _editContext.SetFieldCssClassProvider(new CustomFieldClassHelper());
    }

    public void SetModal(AbsencesSummaryViewModel absencesSummary)
    {
        _isLoadingSubmit = false;
        _isLoadingRecalculate = false;
        _absencesSummary = _mapper.Map<AbsencesSummaryEditViewModel>(absencesSummary);
        _editContext = new(_absencesSummary);
        ChangeVisibility();
    }

    private async Task OnSubmit()
    {
        if (_editContext.Validate())
        {
            _isLoadingSubmit = true;
            await Task.Delay(1);
            await EditAction.InvokeAsync(_absencesSummary);
            ChangeVisibility();
            StateHasChanged();
        }
    }

    private async Task OnRecalculate()
    {
        if (_editContext.Validate())
        {
            _isLoadingSubmit = true;
            await Task.Delay(1);
            await RecalculateAction.InvokeAsync(_absencesSummary);
            ChangeVisibility();
            StateHasChanged();
        }
    }
}
