@page "/absences/details/{Id:int}"

@inherits ExceptionHandlingComponent

@using NursesScheduler.BlazorShared.Controls.Absences
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Absences.Commands.AddAbsence
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Queries.GetNurse
@using NursesScheduler.BusinessLogic.CommandsAndQueries.YearlyAbsencesSummaries.Commands.AddYearlyAbsencesSummary
@using NursesScheduler.BusinessLogic.CommandsAndQueries.YearlyAbsencesSummaries.Queries.GetYearlyAbsencesSummary

@inject IMediator _mediatr;
@inject IMapper _mapper;


@if (_nurse == null || _yearlyAbsencesSummaries == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container">
        <div class="level">
            <div class="level-left">
                <div class="level-item has-text-centered">
                    <p class="title">Nieobecności: @_nurse.ToString()</p>
                </div>
            </div>
            <div class="level-right">
                <div class="level-item">
                    <a class="button is-info" href="/Absences">Powrót</a>
                </div>
            </div>
        </div>
        <div class="mb-4">
            <div class="level">
                <div class="level-left">
                    <div class="level-item">
                        <p>
                            <b>Przysługujący urlop(zaległy):</b> @_currentYearlyAbsencesSummary.PTO.Days dni (@_currentYearlyAbsencesSummary.PTOLeftFromPreviousYear.GetTotalHoursAndMinutes())
                        </p>
                    </div>
                    <div class="level-item">
                        <p>
                            <b>Przypisany urlop:</b> @_currentYearlyAbsencesSummary.PTOUsed.GetTotalHoursAndMinutes()
                        </p>
                    </div>
                    <div class="level-item">
                        <p>
                            <b>Pozostały urlop:</b> @_currentYearlyAbsencesSummary.PTOLeft.GetTotalHoursAndMinutes()
                        </p>
                    </div>
                </div>
                <div class="level-right">
                    <div class="level-item">
                        <div class="level-item">
                            <label class="label">Rok</label>
                        </div>
                    </div>
                    <div class="level-item">
                        <div class="level-item">
                            <div class="control">
                                <div class="select">
                                    <select value=@_selectedYear @onchange="SelectedYearChanged">
                                        @foreach (var summary in _yearlyAbsencesSummaries)
                                        {
                                            <option value="@summary.Year">@summary.Year</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-content">
                <AbsenceForm @ref=_newAbsenceForm AbsenceYear=_selectedYear Absence=_newAbsence SaveAbsence="AddAbsence" />
            </div>
        </div>
        <NursesScheduler.BlazorShared.Controls.Absences.NurseAbsencesTable Absences=_currentYearlyAbsencesSummary.Absences.ToList()/>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private int _selectedYear = DateTime.Now.Year;
    private NurseViewModel _nurse;
    private ICollection<YearlyAbsencesSummaryViewModel> _yearlyAbsencesSummaries;
    private YearlyAbsencesSummaryViewModel _currentYearlyAbsencesSummary;

    private AbsenceViewModel _newAbsence;
    private AbsenceForm _newAbsenceForm;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            await LoadNurse();
            await LoadAbsencesSummary();
            if (!_yearlyAbsencesSummaries.Any(y => y.Year == _selectedYear))
            {
                await AddCurrentYearAbsencesSummary(_selectedYear);
                await LoadAbsencesSummary();
            }
            SelectedYearChanged();
            StateHasChanged();
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }

    private async Task LoadNurse()
    {
        var request = new GetNurseRequest
            {
                NurseId = Id
            };
        var response = await _mediatr.Send(request);
        if (response == null)
            NavigationManager.NavigateTo("/notFound");
        _nurse = _mapper.Map<NurseViewModel>(response);
    }

    private async Task LoadAbsencesSummary()
    {
        var request = new GetYearlyAbsencesSummaryRequest
            {
                NurseId = Id
            };
        var response = await _mediatr.Send(request);

        if (response == null)
            NavigationManager.NavigateTo("/notFound");

        _yearlyAbsencesSummaries = _mapper.Map<ICollection<YearlyAbsencesSummaryViewModel>>(response);
    }

    private async Task AddCurrentYearAbsencesSummary(int year)
    {
        var request = new AddYearlyAbsencesSummaryRequest()
            {
                NurseId = Id,
                Year = year,
            };

        var response = await _mediatr.Send(request);

        if (response == null)
            throw new EntityNotAddedException(nameof(YearlyAbsencesSummaryViewModel));
    }

    private async Task AddAbsence()
    {
        try
        {
            var request = _mapper.Map<AddAbsenceRequest>(_newAbsence);

            var response = await _mediatr.Send(request);

            if (response == null)
                throw new EntityNotAddedException(nameof(AbsenceViewModel));

            var veryficationResult = (AbsenceVeryficationResult)response.VeryficationResult;

            if (veryficationResult != AbsenceVeryficationResult.Valid)
            {
                _newAbsenceForm.HandleInvalidAbsence(veryficationResult);
            }
            else
            {
                _currentYearlyAbsencesSummary.Absences.Add(_newAbsence);
                InitialiseAbsence();
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }

    private void SelectedYearChanged()
    {
        _currentYearlyAbsencesSummary = _yearlyAbsencesSummaries.FirstOrDefault(y => y.Year == _selectedYear);
        InitialiseAbsence();
    }

    private void InitialiseAbsence()
    {
        _newAbsence = new AbsenceViewModel()
            {
                From = DateOnly.FromDateTime(DateTime.Now),
                To = DateOnly.FromDateTime(DateTime.Now),
                Type = (AbsenceTypes)0,
                YearlyAbsencesSummaryId = _currentYearlyAbsencesSummary.YearlyAbsencesSummaryId,
            };
    }
}
