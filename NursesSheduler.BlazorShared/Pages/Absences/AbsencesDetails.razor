@page "/absences/details/{Id:int}/{Year:int}"

@inherits ComponenentUsingDepartament

@using NursesScheduler.BlazorShared.Pages.Absences.Controls
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Absences.Commands.AddAbsence
@using NursesScheduler.BusinessLogic.CommandsAndQueries.AbsencesSummaries.Commands.EditAbsencesSummary
@using NursesScheduler.BusinessLogic.CommandsAndQueries.AbsencesSummaries.Commands.RecalculateAbsencesSummary
@using NursesScheduler.BusinessLogic.CommandsAndQueries.AbsencesSummaries.Queries.GetAbsencesSummary
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Queries.GetNurse

@inject IMediator _mediatr;
@inject IMapper _mapper;

<EditAbsencesSummaryModal @ref="_editAbsencesSummaryModal" Recalculate="RecalculateSummary" Save="EditSummary" />

@if (_nurse == null || _absencesSummaries == null)
{
    <LoadingSpinner />
}
else
{
    <div class="container">
        <div class="level">
            <div class="level-left">
                <div class="level-item has-text-centered">
                    <p class="title">Nieobecności: @_nurse.ToString()</p>
                </div>
            </div>
            <div class="level-right">
                <div class="level-item">
                    <a class="button is-info" href="/Absences">Powrót</a>
                </div>
            </div>
        </div>
        <div class="mb-4">
            <div class="level">
                @if (_dateViewModel.YearNumber <= _currentDate.Year)
                {
                    <div class="level-left">
                        <div class="level-item">
                            <p>
                                <b>Przysługujący urlop(zaległy):</b> @_currentAbsencesSummary.PTODays dni (@_currentAbsencesSummary.PTOTimeLeftFromPreviousYear.GetTotalHoursAndMinutes())
                            </p>
                        </div>
                        <div class="level-item">
                            <p>
                                <b>Wykorzystany urlop:</b> @_currentAbsencesSummary.PTOTimeUsed.GetTotalHoursAndMinutes()
                            </p>
                        </div>
                        <div class="level-item">
                            <p>
                                <b>Pozostały urlop:</b> @_currentAbsencesSummary.PTOLeft.GetTotalHoursAndMinutes()
                            </p>
                        </div>
                        <div class="level-item">
                            <a @onclick="(() => _editAbsencesSummaryModal.SetModal(_currentAbsencesSummary))">Edytuj</a>
                        </div>
                    </div>
                }
                <div class="level-right">
                    <div class="level-item">
                        <div class="level-item">
                            <label class="label">Rok</label>
                        </div>
                    </div>
                    <div class="level-item">
                        <YearSelect YearViewModel=_dateViewModel FirstYear=@_absencesSummaries.Min(a => a.Year) 
                            OnChange="SelectedYearChanged"/>
                    </div>
                </div>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-content">
                <AbsenceForm @ref=_newAbsenceForm Absence=_newAbsence SaveAbsence="AddAbsence" />
            </div>
        </div>
        <div class="level">
            <div class="level-right">
                <div class="level-item">
                    <div class="level-item">
                        <label class="label">Miesiąc</label>
                    </div>
                </div>
                <div class="level-item">
                    <MonthSelect MonthViewModel=_dateViewModel OnChange="ReloadSchedule"/>
                </div>
            </div>
        </div>
        <NurseAbsencesTable Absences=_currentAbsencesSummary.Absences.Where() />
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int Year { get; set; }

    private NurseViewModel _nurse;
    private ICollection<AbsencesSummaryViewModel> _absencesSummaries;
    private AbsencesSummaryViewModel _currentAbsencesSummary;

    private AbsenceViewModel _newAbsence;
    private AbsenceForm _newAbsenceForm;
    private EditAbsencesSummaryModal _editAbsencesSummaryModal;

    private DateViewModel _dateViewModel = new();
    private DateTime _currentDate = DateTime.Now;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dateViewModel.YearNumber = Year;

            if(_currentDate.Year == Year)
            {
                _dateViewModel.MonthNumber = _currentDate.Month;
            }
            else
            {
                _dateViewModel.MonthNumber = 1;
            }

            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            await LoadNurse();
            await LoadAbsencesSummary();
            SelectedYearChanged();
            StateHasChanged();
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }

    private async Task LoadNurse()
    {
        var request = new GetNurseRequest
            {
                NurseId = Id
            };

        var response = await _mediatr.Send(request);
        if (response == null)
        {
            NavigationManager.NavigateTo("/notFound");
        }

        _nurse = _mapper.Map<NurseViewModel>(response);
    }

    private async Task LoadAbsencesSummary()
    {
        var request = new GetAbsencesSummaryRequest
            {
                NurseId = Id
            };
        var response = await _mediatr.Send(request);

        if (response == null)
            NavigationManager.NavigateTo("/notFound");

        _absencesSummaries = _mapper.Map<ICollection<AbsencesSummaryViewModel>>(response);
    }

    private async Task AddAbsence()
    {
        try
        {
            var request = _mapper.Map<AddAbsenceRequest>(_newAbsence);

            var response = await _mediatr.Send(request);

            if (response == null)
                throw new EntityNotAddedException(nameof(AbsenceViewModel));

            var veryficationResult = (AbsenceVeryficationResult)response.VeryficationResult;

            if (veryficationResult != AbsenceVeryficationResult.Valid)
            {
                _newAbsenceForm.HandleInvalidAbsence(veryficationResult);
            }
            else
            {
                _currentAbsencesSummary.Absences.Add(_mapper.Map<AbsenceViewModel>(response));
                InitialiseAbsenceForm();
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }

    private void SelectedYearChanged()
    {
        _currentAbsencesSummary = _absencesSummaries.FirstOrDefault(y => y.Year == _dateViewModel.YearNumber);
        InitialiseAbsenceForm();
    }

    private void InitialiseAbsenceForm()
    {
        _newAbsence = new AbsenceViewModel()
            {
                From = DateOnly.FromDateTime(DateTime.Now),
                To = DateOnly.FromDateTime(DateTime.Now),
                Type = (AbsenceTypes)0,
                AbsencesSummaryId = _currentAbsencesSummary.AbsencesSummaryId,
            };
    }

    private async Task EditSummary(AbsencesSummaryEditViewModel summary)
    {
        try
        {
            var request = _mapper.Map<EditAbsencesSummaryRequest>(summary);

            var respone = await _mediatr.Send(request);

            if (respone == null)
                throw new EntityNotEditedException(summary.AbsencesSummaryId, nameof(AbsencesSummaryEditViewModel));

            await LoadAbsencesSummary();
            SelectedYearChanged();
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }

    private async Task RecalculateSummary(AbsencesSummaryEditViewModel summary)
    {
        try
        {
            var request = new RecalculateAbsencesSummaryRequest
                {
                    AbsencesSummaryId = summary.AbsencesSummaryId,
                };

            var respone = await _mediatr.Send(request);

            summary = _mapper.Map<AbsencesSummaryEditViewModel>(respone);
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }
}
