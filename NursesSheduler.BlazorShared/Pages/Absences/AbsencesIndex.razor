@page "/absences"

@using NursesScheduler.BusinessLogic.CommandsAndQueries.AbsencesSummaries.Queries.GetAbsencesSummaryByDepartament
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Queries.GetNursesFromDepartament

@inherits ComponenentUsingDepartament

@inject IMediator _mediatr
@inject IMapper _mapper


<div class="container">
    <div class="level">
        <div class="level-left">
            <div class="level-item has-text-centered">
                <p class="title">Nieobecności</p>
            </div>
        </div>
        <div class="level-right">
            <div class="level-item">
                <div class="level-item">
                    <label class="label">Rok</label>
                </div>
            </div>
            <div class="level-item">
                <div class="level-item">
                    <div class="control">
                        <div class="select">
                            <select value=@_selectedYear>
                                @for(int i = _minYear; i <= _maxYear; i++)
                                {
                                    <option value="@i">@i</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="level-item">
                <button @onclick="(() => _selectedYear = _currentYear)">Bierzący rok</button>
            </div>
        </div>
    </div>
    @if (_nursesWithSummary == null)
    {
        <LoadingSpinner />
    }
    else
    {
        <NursesScheduler.BlazorShared.Controls.Absences.AbsencesSummaryTable Nurses=_nursesWithSummary 
                                                                                            SelectedYear=_selectedYear/>
    }
</div>


@code {
    private ICollection<NurseWithAbsencesSummariesViewModel> _nursesWithSummary;
    private int _minYear, _maxYear;
    private int _selectedYear;
    private int _currentYear = DateTime.Now.Year;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        { 
            await LoadNursesWithAbsencesSummary();
            CalculateYearScope();
            StateHasChanged();
        }
    }

    private async Task LoadNursesWithAbsencesSummary()
    {
        try
        {
            var request = new GetAbsencesSummaryByDepartamentRequest
                {
                    DepartamentId = CurrentDepartamentStore.CurrentDepartament.DepartamentId
                };
            var response = await _mediatr.Send(request);

            _nursesWithSummary = _mapper.Map<ICollection<NurseWithAbsencesSummariesViewModel>>(response);
        }
        catch (Exception e)
        {
            HandleException(e);
        }
    }

    private void CalculateYearScope()
    {
        _minYear = _maxYear = _currentYear;

        foreach(var _nurse in _nursesWithSummary)
        {
            var min = _nurse.YearlyAbsencesSummaries.Min(s => s.Year);
            var max = _nurse.YearlyAbsencesSummaries.Max(s => s.Year);

            if(min < _minYear)
            {
                _minYear = min;
            }
            if(max > _maxYear)
            {
                _maxYear = max;
            }
        }
    }
}
