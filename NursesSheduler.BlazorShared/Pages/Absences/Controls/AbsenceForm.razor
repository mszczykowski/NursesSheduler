

<ErrorModal @ref=_errorModal />


<EditForm EditContext="@_editContext" OnSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <div class="level">
        <div class="level-left">
            <div class="level-item">
                <div class="field">
                    <label class="label">Początek</label>
                    <div class="control">
                        <InputDate class="input" @bind-Value="Absence.From" min="@GetMinDate()" max="@GetMaxDate()" />
                        <div class="help is-danger">
                            <ValidationMessage For="@(() => Absence.From)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="level-item">
                <div class="field">
                    <label class="label">Koniec</label>
                    <InputDate class="input" @bind-Value="Absence.To" min="@GetMinDate()" max="@GetMaxDate()" />
                    <div class="help is-danger">
                        <ValidationMessage For="@(() => Absence.To)" />
                    </div>
                </div>
            </div>
            <div class="level-item">
                <div class="field">
                    <label class="label">Typ</label>
                    <div class="select">
                        <InputSelect @bind-Value="Absence.Type">
                            @foreach (var absenceType in (AbsenceTypes[])Enum.GetValues(typeof(AbsenceTypes)))
                            {
                                <option value="@absenceType">@absenceType.GetEnumDisplayName()</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
        </div>
        <div class="level-right">
            <div class="level-item">
                <button type="submit" class="button is-success @CssHelper.SetIsLoading(_isLoading)">Zapisz nieobecność</button>
            </div>
        </div>
    </div>
    <div class="level">
        <div class="level-right level-item">
            <div class="has-text-danger">
                <ValidationSummary />
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public AbsenceFormViewModel Absence { get; set; }
    [Parameter]
    public EventCallback SaveAbsence { get; set; }

    private bool _isLoading;
    private EditContext _editContext;
    private ErrorModal _errorModal;

    public void HandleInvalidAbsence(AbsenceVeryficationResult result)
    {
        _errorModal.ShowError(result.GetEnumDisplayName());
    }

    private async Task OnSubmit()
    {
        if (_editContext.Validate())
        {
            _isLoading = true;
            await Task.Delay(1);
            await SaveAbsence.InvokeAsync();
            _isLoading = false;
        }
    }

    protected override void OnInitialized()
    {
        _isLoading = false;
        _editContext = new(Absence);
        _editContext.SetFieldCssClassProvider(new CustomFieldClassHelper());
        base.OnInitialized();
    }

    private string GetMinDate()
    {
        return $"{Absence.From.Year}-01-01";
    }

    private string GetMaxDate()
    {
        return $"{Absence.From.Year}-12-31";
    }
}
