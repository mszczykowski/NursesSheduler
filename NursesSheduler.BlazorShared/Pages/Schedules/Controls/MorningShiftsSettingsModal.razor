@inherits ModalBase

@inject IMapper _mapper;

@if (_morningShiftsEditModel != null && _morningShiftsEditModel.MorningShifts != null && _morningShiftsEditModel.MorningShifts.Any())
{
    <div class="modal @CssHelper.SetIsActive(_isVisible)">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Ustawienia ranków</p>
                <button class="delete" aria-label="close" @onclick="ChangeVisibility"></button>
            </header>
            <EditForm EditContext="@_editContext" OnValidSubmit="@OnSubmit">
                <ObjectGraphDataAnnotationsValidator />
                <section class="modal-card-body">
                    <p>Reszta niepodzielna na 12 godzinne zmiany: <b>@_morningShiftsEditModel.TimeToDivide.GetTotalHoursAndMinutes()</b></p>
                    <br />
                    <TimeSpanInput Label="Długość zmiany 1" @bind-Value="_morningShiftsEditModel.MorningShifts[0].ShiftLength" ValidationFor="@(() => _morningShiftsEditModel.MorningShifts[0].ShiftLength)" />
                    <TimeSpanInput Label="Długość zmiany 2" @bind-Value="_morningShiftsEditModel.MorningShifts[1].ShiftLength" ValidationFor="@(() => _morningShiftsEditModel.MorningShifts[1].ShiftLength)" />
                    <TimeSpanInput Label="Długość zmiany 3" @bind-Value="_morningShiftsEditModel.MorningShifts[2].ShiftLength" ValidationFor="@(() => _morningShiftsEditModel.MorningShifts[2].ShiftLength)" />
                    <div class="is-error">
                        <ValidationSummary class="is-danger" />
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-success" type="submit">Zapisz</button>
                    <button class="button is-info" type="button" @onclick="OnRecalculate">Przelicz</button>
                    <button class="button" type="button" @onclick="ChangeVisibility">Anuluj</button>
                </footer>
            </EditForm>
        </div>
    </div>
}



@code {
    [Parameter]
    public EventCallback<MorningShiftsEditViewModel> Save { get; set; }
    [Parameter]
    public EventCallback<MorningShiftsEditViewModel> Recalculate { get; set; }

    private MorningShiftsEditViewModel _morningShiftsEditModel;
    private EditContext _editContext;

    public void SetModal(MorningShiftViewModel[] morningShifts, TimeSpan timeToDivide)
    {
        _morningShiftsEditModel = new MorningShiftsEditViewModel(morningShifts, timeToDivide);

        _editContext = new(_morningShiftsEditModel);
        _editContext.SetFieldCssClassProvider(new CustomFieldClassHelper());
        ChangeVisibility();
    }

    private async Task OnSubmit()
    {
        await Save.InvokeAsync(_morningShiftsEditModel);
        ChangeVisibility();
    }

    private async Task OnRecalculate()
    {
        await Recalculate.InvokeAsync(_morningShiftsEditModel);
    }
}
