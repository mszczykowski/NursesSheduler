@using System.Linq.Expressions

@inherits InputBase<TimeSpan>

<div class="control">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="label">@Label</label>
    }
    <input class="input" type="text" @bind="@CurrentValueAsString" />
    <div class="help is-danger">
        <ValidationMessage For="@ValidationFor" />
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Expression<Func<TimeSpan>> ValidationFor { get; set; } = default!;
    [Parameter]
    public string? Label { get; set; }

    protected override string FormatValueAsString(TimeSpan value)
    {
        return value.GetTotalHoursAndMinutes();
    }

    protected override bool TryParseValueFromString(string? value, out TimeSpan result, out string validationErrorMessage)
    {
        int hours = 0;
        int minutes = 0;
        string[] stringSpilitted = null;

        if (value != null)
        {
            stringSpilitted = value.Split(':');
        }

        if (stringSpilitted == null || stringSpilitted.Length != 2 || !Int32.TryParse(stringSpilitted[0], out hours)
            || !Int32.TryParse(stringSpilitted[1], out minutes) || minutes > 60 || hours > 999)
        {
            validationErrorMessage = "Należy wpisać wartość w formacie ggg:mm";
            result = default;
            return false;
        }

        validationErrorMessage = null;
        result = new TimeSpan(hours, minutes, 0);
        return true;
    }
}
