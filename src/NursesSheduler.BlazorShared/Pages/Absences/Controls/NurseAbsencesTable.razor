@using NursesScheduler.BusinessLogic.CommandsAndQueries.Absences.Commands.DeleteAbsence

@inherits ComponenentUsingDepartament

@inject IMediator _mediatr
@inject IMapper _mapper
@inject IExceptionHandler _exceptionHandler


<DeleteModal @ref="_deleteModal" DeleteAction="DeleteAbsence" />

@if (Absences == null || !Absences.Any())
{
    <div class="has-text-centered">
        <h4 class="subtitle is-4">Brak wprowadzonych nieobecności</h4>
    </div>
}
else
{
    <table class="table is-striped is-fullwidth">
        <thead>
            <tr>
                <th>Dni</th>
                <th>Długość(dni)</th>
                <th>Godzin pracy</th>
                <th>Przypisanych godzin pracy</th>
                <th class="is-fullwidth">Typ</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var absence in Absences.OrderBy(a => a.Days.Min()).ToList())
            {
                <tr>
                    <td>@absence.ToString()</td>
                    <td>@absence.Lenght</td>
                    <td>@absence.WorkingHoursToAssign.GetTotalHoursAndMinutes()</td>
                    <td>@absence.AssignedWorkingHours.GetTotalHoursAndMinutes()</td>
                    <td class="is-fullwidth">@absence.Type.GetEnumDisplayName()</td>
                    <td><a class="has-text-danger" @onclick="(() => _deleteModal.SetModal(absence.ToString(), absence.AbsenceId))">Usuń</a></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private DeleteModal _deleteModal;
    private EditAbsenceModal _editModal;

    [Parameter]
    public List<AbsenceViewModel> Absences { get; set; }

    private async Task DeleteAbsence(int absenceId)
    {
        try
        {
            var request = new DeleteAbsenceRequest
            {
                AbsenceId = absenceId,
            };
            var response = await _mediatr.Send(request);

            if (!response.Success)
                throw new EntityNotDeletedException(absenceId, nameof(AbsenceViewModel));

            Absences.RemoveAll(a => a.AbsenceId == absenceId);

        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }
}
