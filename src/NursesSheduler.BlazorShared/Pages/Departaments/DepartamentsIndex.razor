@page "/departaments"

@using NursesScheduler.BlazorShared.Pages.Departaments.Controls
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Departaments.Queries.GetAllDepartaments

@inject IMediator _mediatr
@inject IMapper _mapper
@inject IExceptionHandler _exceptonHandler
@inject CurrentDepartamentStore _currentDepartamentStore


<div class="container">
    <div class="level">
        <div class="level-left">
            <div class="level-item has-text-centered">
                <p class="title">Wybierz oddział</p>
            </div>
        </div>
        <div class="level-right">
            <div class="level-item">
                <p class="control">
                  <a class="button is-primary" href="/departaments/add">
                    <span class="icon">
                      <i class="fas fa-plus" aria-hidden="true"></i>
                    </span>
                    <span>Dodaj nowy oddział</span>
                  </a>
                </p>
            </div>
        </div>
    </div>

    @if (_departaments == null)
    {
        <LoadingSpinner/>
    }
    else
    {
        <DepartamentsGrid Departaments=_departaments/>
    }
</div>


@code {
    private List<DepartamentViewModel> _departaments;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if(_currentDepartamentStore.CurrentDepartament is not null)
            {
                _currentDepartamentStore.CurrentDepartament = null;
            }

             await LoadDepartaments();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDepartaments()
    {
        try
        {
            var request = new GetAllDepartamentsRequest();
            var response = await _mediatr.Send(request);

            _departaments = _mapper.Map<List<DepartamentViewModel>>(response);
            StateHasChanged();
        }
        catch (Exception e)
        {
            _exceptonHandler.HandleException(e);
        }
    }
}
