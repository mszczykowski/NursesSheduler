@page "/departaments/edit/{Id:int}"

@using NursesScheduler.BlazorShared.Pages.Departaments.Controls
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Departaments.Queries.GetDepartament
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Departaments.Commands.EditDepartament

@inject IMediator _mediatr
@inject IMapper _mapper
@inject IExceptionHandler _exceptonHandler
@inject NavigationManager _navigationManager

@if(_departament == null)
{
    <LoadingSpinner/>
}
else
{
    <DepartamentForm Title="Edytuj oddział" Departament=@_departament SaveDepartament="SaveDepartament" IsEdit=true/>
}



@code {
    protected DepartamentViewModel _departament;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
            await LoadDepartament();

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDepartament()
    {
        try
        {
            var request = new GetDepartamentRequest
            {
                DepartamentId = Id
            };
            var response = await _mediatr.Send(request);

            if (response == null)
            {
                throw new EntityNotFoundException(Id, nameof(DepartamentViewModel));
            }

            _departament = _mapper.Map<DepartamentViewModel>(response);
            StateHasChanged();
        }
        catch (Exception e)
        {
            _exceptonHandler.HandleException(e);
        }
        
    }

    protected async void SaveDepartament()
    {
        try
        {
            var request = _mapper.Map<EditDepartamentRequest>(_departament);
            var response = await _mediatr.Send(request);

            _navigationManager.NavigateTo("/departaments");
        }
        catch (Exception e)
        {
            _exceptonHandler.HandleException(e);
        }
    }
}
