@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Commands.DeleteNurse

@inject IMediator _mediatr
@inject IExceptionHandler _exceptionHandler;

<DeleteModal @ref="_deleteModal" DeleteAction="DeleteNurse" />

@if (Nurses == null || !Nurses.Any())
{
    <div class="has-text-centered">
        <h4 class="subtitle is-4">Najpierw <a href="/nurses/add">dodaj</a> pracowników</h4>
    </div>
}
else
{
    <table class="table is-striped is-fullwidth">
        <thead>
            <tr>
                <th>L.p.</th>
                <th class="is-fullwidth">Imie i nazwisko</th>
                <th>Bilans nocy</th>
                <th>Bilans godzin świątecznych</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                nurseIndex = 0;
                foreach (var nurse in Nurses.OrderBy(n => n.Surname).ThenBy(n => n.Name))
                {
                    <tr>
                        <td>@nurseIndex++</td>
                        <td class="is-fullwidth">@nurse.ToString()</td>
                        <td class="is-fullwidth">@nurse.NightShiftsBalance</td>
                        <td class="is-fullwidth">@nurse.HolidayHoursBalance.GetTotalHoursAndMinutes()</td>
                        <td><a href="/nurse/edit/@nurse.NurseId">Edytuj</a></td>
                        <td><a class="has-text-danger" @onclick="(() => _deleteModal.SetModal(nurse.ToString(), nurse.NurseId))">Usuń</a></td>
                    </tr>
                }
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public ICollection<NurseViewModel> Nurses { get; set; }

    private DeleteModal _deleteModal;

    private int nurseIndex;

    private async Task DeleteNurse(int nurseId)
    {
        try
        {
            var request = new DeleteNurseRequest
                {
                    NurseId = nurseId,
                };
            var response = await _mediatr.Send(request);

            if (!response.Success)
            {
                throw new EntityNotDeletedException(nurseId, "Nurse");
            }

            Nurses.Remove(Nurses.First(n => n.NurseId == nurseId));

        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }
}