@page "/nurse/edit/{Id:int}"

@inherits ComponenentUsingDepartament

@using NursesScheduler.BlazorShared.Pages.Nurses.Controls
@using NursesScheduler.BusinessLogic.CommandsAndQueries.DepartamentsSettings.Queries.GetDepartamentSettings
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Commands.EditNurse
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Queries.GetNurse

@inject IMediator _mediatr
@inject IMapper _mapper
@inject IExceptionHandler _exceptionHandler;

<div class='container'>
    <div class="level">
        <div class="level-left">
            <div class="level-item has-text-centered">
                <p class="title">Edytuj pracownika</p>
            </div>
        </div>
        <div class="level-right">
            <div class="level-item">
                <a class="button is-info" href="/nurses">Powrót</a>
            </div>
        </div>
    </div>
    @if (_nurse == null)
    {
        <LoadingSpinner />
    }
    else
    {
        <NurseForm Nurse=@_nurse UseTeams=_departametSettings.UseTeams SaveNurse="SaveNurse" />
    }
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    private NurseViewModel _nurse;
    private DepratamentSettingsViewModel _departametSettings;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDepartamentSettings();
            await LoadNurse();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDepartamentSettings()
    {
        try
        {
            var request = new GetDepartamentSettingsRequest
                {
                    DepartamentId = CurrentDepartamentStore.CurrentDepartament.DepartamentId,
                };

            _departametSettings = _mapper.Map<DepratamentSettingsViewModel>(await _mediatr.Send(request));
        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }

    private async Task LoadNurse()
    {
        try
        {
            var request = new GetNurseRequest
                {
                    NurseId = Id
                };
            var response = await _mediatr.Send(request);
            if (response == null)
                NavigationManager.NavigateTo("/notFound");
            _nurse = _mapper.Map<NurseViewModel>(response);
            StateHasChanged();
        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }

    private async Task SaveNurse()
    {
        try
        {
            var request = _mapper.Map<EditNurseRequest>(_nurse);
            var response = await _mediatr.Send(request);

            NavigationManager.NavigateTo("/nurses");
        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }
}
