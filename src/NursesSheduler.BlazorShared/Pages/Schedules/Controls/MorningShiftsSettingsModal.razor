@using NursesScheduler.BusinessLogic.CommandsAndQueries.MorningShifts.Commands.UpsertMorningShifts
@using NursesScheduler.BusinessLogic.CommandsAndQueries.MorningShifts.Queries.CalculateMorningShifts

@inherits ModalBase

@inject IMapper _mapper;
@inject IMediator _mediatr;
@inject IExceptionHandler _exceptionHandler;

@if (_morningShiftsForm is not null)
{
    <div class="modal @CssHelper.SetIsActive(_isVisible)">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Ustawienia ranków</p>
                <button class="delete" aria-label="close" @onclick="ChangeVisibility"></button>
            </header>
            <EditForm EditContext="@_editContext" OnValidSubmit="@OnSave">
                <ObjectGraphDataAnnotationsValidator />
                <section class="modal-card-body">
                    <p>Reszta niepodzielna na 12 godzinne dyżury: <b>@QuarterStats.TimeForMorningShifts.GetTotalHoursAndMinutes()</b></p>
                    <br />
                    @foreach (var morningShift in _morningShiftsForm.MorningShifts)
                    {
                        <fieldset disabled=@morningShift.ReadOnly>
                            <TimeSpanInput Label=@GetInputLabel(morningShift.Index) @bind-Value="morningShift.ShiftLength" ValidationFor="@(() => morningShift.ShiftLength)" />
                        </fieldset>
                    }
                    <p>Ranków użytych w zamkniętych kwartałach nie można edytować!</p>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-success @CssHelper.SetIsLoading(_isSaveLoading)" type="submit" disabled=@CanEdit()>Zapisz</button>
                    <button class="button is-info" type="button" @onclick="OnRecalculate" disabled=@CanEdit()>Przelicz</button>
                    <button class="button" type="button" @onclick="ChangeVisibility">Anuluj</button>
                </footer>
            </EditForm>
        </div>
    </div>
}



@code {
    [Parameter]
    public QuarterViewModel Quarter { get; set; }
    [Parameter]
    public QuarterStatsViewModel QuarterStats { get; set; }
    [Parameter]
    public IEnumerable<MorningShiftViewModel> MorningShifts { get; set; }

    private MorningShiftsFormViewModel _morningShiftsForm;
    private EditContext _editContext;
    private bool _isSaveLoading;


    public override void ShowModal()
    {
        _isSaveLoading = false;

        _morningShiftsForm = new(MorningShifts);

        _editContext = new(_morningShiftsForm);
        _editContext.SetFieldCssClassProvider(new CustomFieldClassHelper());

        base.ChangeVisibility();
    }

    private async Task OnSave()
    {
        try
        {
            if(!CanEdit)
            {
                return;
            }

            _isSaveLoading = true;
            await Task.Delay(1);

            var request = new UpsertMorningShiftsRequest
                {
                    QuarterId = Quarter.QuarterId,
                    MorningShifts = _mapper
                            .Map<IEnumerable<UpsertMorningShiftsRequest.MorningShiftRequest>>(_morningShiftsForm
                                .MorningShifts
                                .Where(m => !m.ReadOnly)),
                };
            var response = await _mediatr.Send(request) ?? throw new EntityNotAddedException(nameof(MorningShiftViewModel)); ;

            MorningShifts = _mapper.Map<MorningShiftViewModel[]>(response);
            base.ChangeVisibility();
        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }

    private async Task OnRecalculate()
    {
        try
        {
            var request = new CalculateMorningShiftsRequest
                {
                    TimeForMorningShifts = QuarterStats.TimeForMorningShifts,
                    DepartamentId = Quarter.DepartamentId,
                };
            var response = await _mediatr.Send(request);

            _morningShiftsForm.MorningShifts = _mapper.Map<MorningShiftViewModel[]>(response);
        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }

    private bool CanEdit()
    {
        return _morningShiftsForm.MorningShifts.Any(s => !s.ReadOnly);
    }

    private string GetInputLabel(MorningShiftIndexes index)
    {
        return "Długość ranka " + ((int)index + 1);
    }
}
