@using NursesScheduler.BusinessLogic.CommandsAndQueries.MorningShifts.Commands.UpsertMorningShifts
@using NursesScheduler.BusinessLogic.CommandsAndQueries.MorningShifts.Queries.CalculateMorningShifts

@inherits ModalBase

@inject IMapper _mapper;
@inject IMediator _mediatr;
@inject IExceptionHandler _exceptionHandler;

@if (Quarter is not null && _morningShiftsEditModel is not null)
{
    <div class="modal @CssHelper.SetIsActive(_isVisible)">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Ustawienia ranków</p>
                <button class="delete" aria-label="close" @onclick="ChangeVisibility"></button>
            </header>
            <EditForm EditContext="@_editContext" OnValidSubmit="@OnSave">
                <ObjectGraphDataAnnotationsValidator />
                <section class="modal-card-body">
                    <p>Reszta niepodzielna na 12 godzinne dyżury: <b>@Quarter.TimeForMorningShifts.GetTotalHoursAndMinutes()</b></p>
                    <br />
                    <fieldset @CssHelper.SetDisabled(Quarter.IsClosed)>
                        @for(int i = 0; i < MorningShifts.Count(); i++)
                        {
                            <TimeSpanInput Label=@GetInputLabel(i) @bind-Value="_morningShiftsEditModel.MorningShifts[i].ShiftLength" ValidationFor="@(() => _morningShiftsEditModel.MorningShifts[i].ShiftLength)" />
                        }
                    </fieldset>
                    <p>Po zamnięciu któregokolwiek grafiku z kwartału nie będzie można edytować ranków!</p>
                </section>
                <footer class="modal-card-foot">
                    <button class="button is-success @CssHelper.SetIsLoading(_isSaveLoading)" type="submit">Zapisz</button>
                    <button class="button is-info" type="button" @onclick="OnRecalculate">Przelicz</button>
                    <button class="button" type="button" @onclick="ChangeVisibility">Anuluj</button>
                </footer>
            </EditForm>
        </div>
    </div>
}



@code {
    [Parameter]
    public QuarterViewModel Quarter { get; set; }
    [Parameter]
    public IEnumerable<MorningShiftViewModel> MorningShifts { get; set; }

    private MorningShiftsFormViewModel _morningShiftsEditModel;
    private EditContext _editContext;
    private bool _isSaveLoading;

    public override void ShowModal()
    {
        _morningShiftsEditModel = new(MorningShifts);

        _editContext = new(_morningShiftsEditModel);
        _editContext.SetFieldCssClassProvider(new CustomFieldClassHelper());
        _isSaveLoading = false;
        ChangeVisibility();
    }

    private async Task OnSave()
    {
        try
        {
            _isSaveLoading = true;
            await Task.Delay(1);

            var request = new UpsertMorningShiftsRequest
            {
                QuarterId = Quarter.QuarterId,
                MorningShifts = _mapper
                    .Map<IEnumerable<UpsertMorningShiftsRequest.MorningShiftRequest>>(_morningShiftsEditModel.MorningShifts),
            };
            var response = await _mediatr.Send(request);

            if(response is null)
            {
                throw new EntityNotAddedException(nameof(MorningShiftViewModel));
            }

            MorningShifts = _mapper.Map<MorningShiftViewModel[]>(response);
            base.ChangeVisibility();
        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }

    private async Task OnCancel()
    {
        base.ChangeVisibility();
    }

    private async Task OnRecalculate()
    {
        try
        {
            var request = new CalculateMorningShiftsRequest
                {
                    TimeForMorningShifts = Quarter.TimeForMorningShifts,
                    DepartamentId = Quarter.DepartamentId,
                };
            var response = await _mediatr.Send(request);

            _morningShiftsEditModel.MorningShifts = _mapper.Map<MorningShiftViewModel[]>(response);
        }
        catch (Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }

    private string GetInputLabel(int i)
    {
        return "Długość ranka " + (i + 1);
    }
}
