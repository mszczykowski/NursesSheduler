@using NursesScheduler.BusinessLogic.CommandsAndQueries.QuartersStats.Queries.RecalculateNurseQuarterStats
@using NursesScheduler.BusinessLogic.CommandsAndQueries.SchedulesStats.Queries.RecalculateNurseScheduleStats

@inject IMapper _mapper;
@inject IMediator _mediatr;

<tr>
    <td class="no">@No</td>
    <td class="name">
        <p>@Nurse.Name</p>
        <p>@Nurse.Surname</p>
    </td>
    @foreach (var workDay in ScheduleNurse.NurseWorkDays)
    {
        <ScheduleShift WorkDay=workDay Day=@CommonRowsData.MonthDays.First(d=>d.Date.Day == workDay.Day) MorningShifts="CommonRowsData.MorningShifts" OnChange="RecalcuateStatsAsync"/>
    }
    @if (CommonRowsData.StatsDipslayed == StatsDisplayed.Schedule)
    {
        <td class="summary">@((CommonRowsData.MonthWorkTime - ScheduleNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes())</td>
        <td class="summary">@ScheduleNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@ScheduleNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@ScheduleNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@ScheduleNurseStats.NightShiftsAssigned</td>
    }
    else
    {
        <td class="summary">@((CommonRowsData.QuarterWorkTime - QuarterNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes())</td>
        <td class="summary">@QuarterNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@QuarterNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@QuarterNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@QuarterNurseStats.NightShiftsAssigned</td>
    }
</tr>


@code {
    [Parameter]
    public int No { get; set; }
    [Parameter]
    public ScheduleNurseViewModel ScheduleNurse { get; set; }
    [Parameter]
    public NurseViewModel Nurse { get; set; }
    [Parameter]
    public NurseStatsViewModel QuarterNurseStats { get; set; }
    [Parameter]
    public NurseStatsViewModel ScheduleNurseStats { get; set; }
    [Parameter]
    public ScheduleRowCommonDataViewModel CommonRowsData { get; set; }


    public async Task RecalcuateStatsAsync()
    {
        await RecalcuateScheduleStatsAsync();
        await RecalcuateQuarterStatsAsync();
    }

    private async Task RecalcuateScheduleStatsAsync()
    {
        var scheduleStatsRequest = new RecalculateNurseScheduleStatsRequest
            {
                DepartamentId = CommonRowsData.DepartamentId,
                Year = CommonRowsData.Year,
                Month = CommonRowsData.Month,
                ScheduleNurse = _mapper.Map<RecalculateNurseScheduleStatsRequest.ScheduleNurseRequest>(ScheduleNurse),
            };

        ScheduleNurseStats = _mapper.Map<NurseStatsViewModel>(await _mediatr.Send(scheduleStatsRequest));
    }

    private async Task RecalcuateQuarterStatsAsync()
    {
        var quarterStatsRequest = new RecalculateNurseQuarterStatsRequest
            {
                DepartamentId = CommonRowsData.DepartamentId,
                Year = CommonRowsData.Year,
                Month = CommonRowsData.Month,
                CurrentScheduleNurseStats = _mapper
                    .Map<RecalculateNurseQuarterStatsRequest.NurseStatsRequest>(ScheduleNurseStats),
            };

        QuarterNurseStats = _mapper.Map<NurseStatsViewModel>(await _mediatr.Send(quarterStatsRequest));
    }
}
