@using NursesScheduler.BusinessLogic.CommandsAndQueries.QuartersStats.Queries.RecalculateNurseQuarterStats
@using NursesScheduler.BusinessLogic.CommandsAndQueries.SchedulesStats.Queries.RecalculateNurseScheduleStats

@inject IMapper _mapper
@inject IMediator _mediatr
@inject IExceptionHandler _exceptionHandler

<tr>
    <td class="no">@No</td>
    <td class="name-col">
        <div class="name">
            <p>@Nurse.Surname</p>
            <p>@Nurse.Name</p>
        </div>
        @if(!ScheduleData.ReadOnly && _scheduleValidationErrors is not null && _scheduleValidationErrors.Count() > 0)
        {
            <Button Text="!" Style="is-small is-danger is-outlined" Action="async() => await ShowValidationErrorModal.InvokeAsync(_scheduleValidationErrors)"/>
        }
    </td>
    @foreach (var workDay in _scheduleNurse.NurseWorkDays)
    {
        <ScheduleShift WorkDay=workDay Day=@ScheduleData.Days.First(d=>d.Date.Day == workDay.Day)
                   MorningShifts="QuarterData.MorningShifts" OnChange=@(() => ScheduleData.RequestRowRecalculation(Nurse.NurseId)) ReadOnly=ScheduleData.ReadOnly
                   SelectTimeOffFrom="StartSelectingNewTimeOff" SelectTimeOffTo="EndSelectingNewTimeOff" />
    }
    @if (ScheduleData.CurrentStatsDipslayed == StatsDisplayed.Schedule)
    {
        <td class="summary">@((ScheduleData.ScheduleStats.WorkTimeInMonth - _scheduleNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes())</td>
        <td class="summary">@_scheduleNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_scheduleNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_scheduleNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_scheduleNurseStats.NightHoursAssigned.GetTotalHoursAndMinutes()</td>
    }
    else
    {
        <td class="summary">@((QuarterData.QuarterStats.WorkTimeInQuarter - _quarterNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes())</td>
        <td class="summary">@_quarterNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_quarterNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_quarterNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_quarterNurseStats.NightHoursAssigned.GetTotalHoursAndMinutes()</td>
    }
</tr>


@code {
    [Parameter]
    public int No { get; set; }
    [Parameter]
    public NurseViewModel Nurse { get; set; }
    [Parameter]
    public QuarterDataWrapper QuarterData { get; set; }
    [Parameter]
    public ScheduleDataWrapper ScheduleData { get; set; }
    [Parameter]
    public EventCallback<NewAbsenceSelection> OnAbsenceSelected { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<ScheduleValidationErrorViewModel>> ShowValidationErrorModal { get; set; }


    private NurseStatsViewModel _scheduleNurseStats => ScheduleData.ScheduleStats.NursesScheduleStats[Nurse.NurseId];
    private NurseStatsViewModel _quarterNurseStats => QuarterData.QuarterStats.NurseStats[Nurse.NurseId];
    private ScheduleNurseViewModel _scheduleNurse => ScheduleData.Schedule.ScheduleNurses.First(n => n.NurseId == Nurse.NurseId);
    private IEnumerable<ScheduleValidationErrorViewModel> _scheduleValidationErrors => ScheduleData.ValidationErrors[Nurse.NurseId];

    private NewAbsenceSelection? _newAbsenceSelection;

    private void StartSelectingNewTimeOff(int day)
    {
        _newAbsenceSelection = new NewAbsenceSelection
            {
                From = day,
                Month = ScheduleData.Schedule.Month,
                Year = QuarterData.Quarter.Year,
                Nurse = Nurse,
            };
    }

    private async Task EndSelectingNewTimeOff(int day)
    {
        if(_newAbsenceSelection is null)
        {
            return;
        }

        _newAbsenceSelection.To = day;

        await OnAbsenceSelected.InvokeAsync(_newAbsenceSelection);

        _newAbsenceSelection = null;
    }
}
