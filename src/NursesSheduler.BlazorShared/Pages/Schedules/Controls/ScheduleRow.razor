@using NursesScheduler.BusinessLogic.CommandsAndQueries.QuartersStats.Queries.RecalculateNurseQuarterStats
@using NursesScheduler.BusinessLogic.CommandsAndQueries.SchedulesStats.Queries.RecalculateNurseScheduleStats

@inject IMapper _mapper
@inject IMediator _mediatr
@inject IExceptionHandler _exceptionHandler

<tr>
    <td class="no">@No</td>
    <td class="name">
        <p>@Nurse.Name</p>
        <p>@Nurse.Surname</p>
    </td>
    @foreach (var workDay in ScheduleNurse.NurseWorkDays)
    {
        <ScheduleShift WorkDay=workDay Day=@CommonTableData.MonthDays.First(d=>d.Date.Day == workDay.Day)
                   MorningShifts="CommonTableData.MorningShifts" OnChange="RecalcuateStatsAsync" ReadOnly=CommonTableData.ReadOnly />
    }
    @if (CommonTableData.CurrentStatsDipslayed == StatsDisplayed.Schedule)
    {
        <td class="summary">@((CommonTableData.MonthWorkTime - _scheduleNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes())</td>
        <td class="summary">@_scheduleNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_scheduleNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_scheduleNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_scheduleNurseStats.NightShiftsAssigned</td>
    }
    else
    {
        <td class="summary">@((CommonTableData.QuarterWorkTime - _quarterNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes())</td>
        <td class="summary">@_quarterNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_quarterNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_quarterNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@_quarterNurseStats.NightShiftsAssigned</td>
    }
</tr>


@code {
    [Parameter]
    public int No { get; set; }
    [Parameter]
    public ScheduleNurseViewModel ScheduleNurse { get; set; }
    [Parameter]
    public NurseViewModel Nurse { get; set; }
    [Parameter]
    public IDictionary<int, NurseStatsViewModel> QuarterNursesStats { get; set; }
    [Parameter]
    public IDictionary<int, NurseStatsViewModel> ScheduleNursesStats { get; set; }
    [Parameter]
    public CommonTableDataViewModel CommonTableData { get; set; }

    private NurseStatsViewModel _scheduleNurseStats => ScheduleNursesStats[Nurse.NurseId];
    private NurseStatsViewModel _quarterNurseStats => QuarterNursesStats[Nurse.NurseId];

    public async Task RecalcuateStatsAsync()
    {
        try
        {
            await RecalcuateScheduleStatsAsync();
            await RecalcuateQuarterStatsAsync();
            CommonTableData.RequestTableRefresh();
        }
        catch(Exception e)
        {
            _exceptionHandler.HandleException(e);
        }
    }

    private async Task RecalcuateScheduleStatsAsync()
    {
        var request = new RecalculateNurseScheduleStatsRequest
            {
                DepartamentId = CommonTableData.DepartamentId,
                Year = CommonTableData.Year,
                Month = CommonTableData.Month,
                ScheduleNurse = _mapper.Map<RecalculateNurseScheduleStatsRequest.ScheduleNurseRequest>(ScheduleNurse),
            };

        ScheduleNursesStats[Nurse.NurseId] = _mapper.Map<NurseStatsViewModel>(await _mediatr.Send(request));
    }

    private async Task RecalcuateQuarterStatsAsync()
    {
        var request = new RecalculateNurseQuarterStatsRequest
            {
                DepartamentId = CommonTableData.DepartamentId,
                Year = CommonTableData.Year,
                Month = CommonTableData.Month,
                CurrentScheduleNurseStats = _mapper
                            .Map<RecalculateNurseQuarterStatsRequest.NurseStatsRequest>(_scheduleNurseStats),
            };

        QuarterNursesStats[Nurse.NurseId] = _mapper.Map<NurseStatsViewModel>(await _mediatr.Send(request));
    }
}
