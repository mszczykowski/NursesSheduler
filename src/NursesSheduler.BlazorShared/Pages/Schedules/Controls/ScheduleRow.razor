@using NursesScheduler.BusinessLogic.CommandsAndQueries.QuartersStats.Queries.RecalculateNurseQuarterStats
@using NursesScheduler.BusinessLogic.CommandsAndQueries.SchedulesStats.Queries.RecalculateNurseScheduleStats

@inject IMapper _mapper;
@inject IMediator _mediatr;

<tr>
    <td class="no">@No</td>
    <td class="name">
        <p>@Nurse.Name</p>
        <p>@Nurse.Surname</p>
    </td>
    <SchedulePrevState PreviousStatate=ScheduleNurse.PreviousState />
    @foreach (var workDay in ScheduleNurse.NurseWorkDays)
    {
        <ScheduleShift WorkDay=workDay Day=@MonthDays.First(d=>d.Date.Day == workDay.Day) MorningShifts="MorningShifts" OnChange="RecalcuateStatsAsync"/>
    }
    <th class="summary">Poz. czas pracy</th>
    <th class="summary">Przyp. urlop</th>
    <th class="summary">Urlop do przyp.</th>
    <th class="summary">Godz. świąt.</th>
    <th class="summary">Licz. nocy</th>
    @if (StatsDipslayed == StatsDisplayed.Schedule)
    {
        <td class="summary">@(MonthWorkTime - ScheduleNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes()</td>
        <td class="summary">@ScheduleNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@ScheduleNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@ScheduleNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@ScheduleNurseStats.NightShiftsAssigned</td>
    }
    else
    {
        <td class="summary">@(QuarterWorkTime - QuarterNurseStats.AssignedWorkTime).GetTotalHoursAndMinutes()</td>
        <td class="summary">@QuarterNurseStats.TimeOffAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@QuarterNurseStats.TimeOffToAssign.GetTotalHoursAndMinutes()</td>
        <td class="summary">@QuarterNurseStats.HolidayHoursAssigned.GetTotalHoursAndMinutes()</td>
        <td class="summary">@QuarterNurseStats.NightShiftsAssigned</td>
    }
</tr>


@code {
    [Parameter]
    public int No { get; set; }
    [Parameter]
    public bool ReadOnly { get; set; }
    [Parameter]
    public StatsDisplayed StatsDipslayed { get; set; }

    [Parameter]
    public QuarterViewModel Quarter { get; set; }
    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public TimeSpan QuarterWorkTime { get; set; }
    [Parameter]
    public TimeSpan MonthWorkTime { get; set; }
    [Parameter]
    public ScheduleNurseViewModel ScheduleNurse { get; set; }
    [Parameter]
    public NurseViewModel Nurse { get; set; }
    [Parameter]
    public IEnumerable<DayViewModel> MonthDays { get; set; }
    [Parameter]
    public IEnumerable<MorningShiftViewModel> MorningShifts { get; set; }
    [Parameter]
    public NurseStatsViewModel QuarterNurseStats { get; set; }
    [Parameter]
    public NurseStatsViewModel ScheduleNurseStats { get; set; }




    public async Task RecalcuateStatsAsync()
    {
        var scheduleStatsRequest = new RecalculateNurseScheduleStatsRequest
            {
                DepartamentId = Quarter.DepartamentId,
                Year = Quarter.Year,
                Month = Month,
                ScheduleNurse = _mapper.Map<RecalculateNurseScheduleStatsRequest.ScheduleNurseRequest>(ScheduleNurse),
            };

        ScheduleNurseStats = _mapper.Map<NurseStatsViewModel>(await _mediatr.Send(scheduleStatsRequest));
    }

    private async Task RecalcuateScheduleStatsAsync()
    {
        var scheduleStatsRequest = new RecalculateNurseScheduleStatsRequest
            {
                DepartamentId = Quarter.DepartamentId,
                Year = Quarter.Year,
                Month = Month,
                ScheduleNurse = _mapper.Map<RecalculateNurseScheduleStatsRequest.ScheduleNurseRequest>(ScheduleNurse),
            };

        ScheduleNurseStats = _mapper.Map<NurseStatsViewModel>(await _mediatr.Send(scheduleStatsRequest));
    }

    private async Task RecalcuateQuarterStatsAsync()
    {
        var quarterStatsRequest = new RecalculateNurseQuarterStatsRequest
            {
                DepartamentId = Quarter.DepartamentId,
                Year = Quarter.Year,
                Month = Month,
                CurrentScheduleNurseStats = _mapper
                    .Map<RecalculateNurseQuarterStatsRequest.NurseStatsRequest>(ScheduleNurseStats),
            };

        QuarterNurseStats = _mapper.Map<NurseStatsViewModel>(await _mediatr.Send(quarterStatsRequest));
    }
}
