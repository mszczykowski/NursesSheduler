@if (!ShouldDisplayTable())
{
    <br />
    <div class="has-text-centered">
        <h4 class="subtitle is-4">Najpierw <a href="/nurses/add">dodaj</a> pracowników</h4>
    </div>
}
else
{
    <ScheduleHeader Quarter=Quarter ScheduleStats=ScheduleStats QuarterStats=QuarterStats CommonTableData=_commonTableData/>
    <table class="table-schedule">
        <thead>
            <tr>
                <th class="no">L.p.</th>
                <th class="name">Pracownik</th>
                @foreach (var day in MonthDays)
                {
                    <th class="@ScheduleCssHelper.GetDayClass(day) day">
                        <div class="tooltip">
                            <p>@day.ToString()</p>
                            <p>@day.GetDayOfWeekAbreviation()</p>
                            @if (day.IsHoliday && !String.IsNullOrEmpty(day.HolidayName))
                            {
                                <div class="tooltiptext">@day.HolidayName</div>
                            }
                        </div>
                    </th>
                }
                <th class="summary">Poz. czas pracy</th>
                <th class="summary">Przyp. urlop</th>
                <th class="summary">Urlop do przyp.</th>
                <th class="summary">Godz. świąt.</th>
                <th class="summary">Licz. nocy</th>
            </tr>
        </thead>
        <tbody>
            @{
                i = 1;
                foreach (var scheduleNurse in Schedule.ScheduleNurses)
                {
                    <ScheduleRow No=i++ ScheduleNurse=scheduleNurse Nurse=@Nurses.First(n=>n.NurseId == scheduleNurse.NurseId)
                        QuarterNursesStats=@QuarterStats.NurseStats
                        ScheduleNursesStats=@ScheduleStats.NursesScheduleStats
                        CommonTableData=_commonTableData />
                }
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public IEnumerable<DayViewModel> MonthDays { get; set; }
    [Parameter]
    public IEnumerable<NurseViewModel> Nurses { get; set; }
    [Parameter]
    public ScheduleViewModel Schedule { get; set; }
    [Parameter]
    public IEnumerable<MorningShiftViewModel> MorningShifts { get; set; }
    [Parameter]
    public ScheduleStatsViewModel ScheduleStats { get; set; }
    [Parameter]
    public QuarterStatsViewModel QuarterStats { get; set; }
    [Parameter]
    public bool ReadOnly { get; set; }
    [Parameter]
    public QuarterViewModel Quarter { get; set; }

    private int i;

    private CommonTableDataViewModel _commonTableData;

    protected override Task OnParametersSetAsync()
    {
        if (ShouldDisplayTable())
        {
            BuildCommonTableData();
        }

        return base.OnParametersSetAsync();
    }

    private bool ShouldDisplayTable()
    {
        return Schedule is not null && Schedule.ScheduleNurses is not null && Schedule.ScheduleNurses.Any();
    }

    private void BuildCommonTableData()
    {
        _commonTableData = new CommonTableDataViewModel
            {
                ReadOnly = ReadOnly,
                CurrentStatsDipslayed = StatsDisplayed.Schedule,
                DepartamentId = Quarter.DepartamentId,
                Year = Quarter.Year,
                Month = Schedule.Month,
                QuarterWorkTime = QuarterStats.WorkTimeInQuarter,
                MonthWorkTime = ScheduleStats.WorkTimeInMonth,
                MonthDays = MonthDays,
                MorningShifts = MorningShifts,
            };
        _commonTableData.TableNeedsRefresing += RefreshTable;
    }

    private void RefreshTable()
    {
        StateHasChanged();
    }
}
