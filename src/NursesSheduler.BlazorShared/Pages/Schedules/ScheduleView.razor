@page "/scheduleView"

@using NursesScheduler.BlazorShared.Pages.Schedules.Controls
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Days.Queries.GetMonthDays
@using NursesScheduler.BusinessLogic.CommandsAndQueries.DepartamentsSettings.Queries.GetDepartamentSettings
@using NursesScheduler.BusinessLogic.CommandsAndQueries.MorningShifts.Commands
@using NursesScheduler.BusinessLogic.CommandsAndQueries.MorningShifts.Queries.GetMorningShifts
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Queries.GetNursesFromDepartament
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Quarters.Commands.UpsertQuarter
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Schedules.Queries.GetSchedule

@inherits ComponenentUsingDepartament

@inject IMediator _mediatr
@inject IMapper _mapper
@inject IExceptionHandler _exceptionHandler

<MorningShiftsSettingsModal @ref="_morningShiftsSettingsModal" Quarter=_quarter MorningShifts=_morningShifts />
<SolverSettingsModal @ref="_solverSettingsModal" SolverSettings=_solverSettings />

@if (_isLoading)
{
    <LoadingSpinner />
}
else
{
    <div class="container is-fluid">
        <div class="level">
            <div class="level-left">
                <div class="level-item">
                    <a @onclick="(() => _morningShiftsSettingsModal.ShowModal())">Konfiguracja ranków</a>
                </div>
                <div class="level-item">
                    <a @onclick="(() => _solverSettingsModal.ShowModal())">Konfiguracja generatora</a>
                </div>
                <div class="level-item">
                    <a>Drukuj</a>
                </div>
            </div>
        </div>
        <div class="level">
            <div class="level-left">
                <div class="level-item">
                    <label class="label">Miesiąc</label>
                </div>
                <div class="level-item">
                    <MonthSelect MonthPickerViewModel=_dateViewModel OnChange="OnSeletedDateChanged" />
                </div>
                <div class="level-item">
                    <label class="label">Rok</label>
                </div>
                <div class="level-item">
                    <YearSelect YearPickerViewModel=_dateViewModel FirstYear=CurrentDepartamentStore.CurrentDepartament.CreationYear OnChange="OnSeletedDateChanged" />
                </div>
                <div class="level-item">
                    <button class="button is-info" @onclick="OnCurrentDateClick">Bieżący miesiąc</button>
                </div>
            </div>

            <div class="level-right">
                <div class="level-item">
                    <p class="control">
                        <a class="button is-info">
                            <span class="icon">
                                <i class="fas fa-check" aria-hidden="true"></i>
                            </span>
                            <span>Sprawdź</span>
                        </a>
                    </p>
                </div>
                <div class="level-item">
                    <p class="control">
                        <a class="button is-danger">
                            <span class="icon">
                                <i class="fas fa-xmark" aria-hidden="true"></i>
                            </span>
                            <span>Wyczyść</span>
                        </a>
                    </p>
                </div>
                <div class="level-item">
                    <p class="control">
                        <a class="button is-warning">
                            <span class="icon">
                                <i class="fas fa-wand-magic-sparkles" aria-hidden="true"></i>
                            </span>
                            <span>Generuj</span>
                        </a>
                    </p>
                </div>
                <div class="level-item">
                    <p class="control">
                        <a class="button is-success">
                            <span class="icon">
                                <i class="far fa-floppy-disk" aria-hidden="true"></i>
                            </span>
                            <span>Zapisz</span>
                        </a>
                    </p>
                </div>
            </div>
        </div>

        <div class="level">
            <div class="level-left">
                <div class="level-item">
                    <p>
                        <b>Kwartał:</b> @_quarter.QuarterNumber
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Norma:</b> @_schedule.WorkTimeInMonth.GetTotalHoursAndMinutes()
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Czas w kwartale:</b> @_quarter.WorkTimeInQuarterToAssign.GetTotalHoursAndMinutes()
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Bilans czasu pracy:</b> @_schedule.TimeOffAvailableToAssgin.GetTotalHoursAndMinutes()
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Przydzielony urlop:</b> @_schedule.TimeOffAssigned.GetTotalHoursAndMinutes()
                    </p>
                </div>
            </div>
            <div class="level-right">
                <p><b>Zapisano!</b></p>
            </div>
        </div>
    </div>

    <ScheduleTable MonthDays=_days ScheduleNurses=_schedule.ScheduleNurses MorningShifts=_morningShifts Nurses=_nurses />
}


@code {
    private IEnumerable<NurseViewModel> _nurses;
    private IEnumerable<DayViewModel> _days;
    private QuarterViewModel _quarter;
    private IEnumerable<MorningShiftViewModel> _morningShifts;
    private ScheduleViewModel _schedule;
    private SolverSettingsViewModel _solverSettings;

    private ModalBase _morningShiftsSettingsModal;
    private ModalBase _solverSettingsModal;

    private DatePickerViewModel _dateViewModel = new DatePickerViewModel
        {
            YearNumber = DateTime.Now.Year,
            MonthNumber = DateTime.Now.Month,
        };

    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = true;

            try
            {
                await GetNurses();
                await InitializeSolverSettings();
                await SetQuarter();
                await SetSchedule();
            }
            catch (Exception e)
            {
                _exceptionHandler.HandleException(e);
            }

            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSeletedDateChanged()
    {
        _isLoading = true;
        await Task.Delay(1);

        try
        {
            await SetSchedule();
        }
        catch (Exception ex)
        {
            _exceptionHandler.HandleException(ex);
        }

        _isLoading = false;
    }

    private async Task OnCurrentDateClick()
    {
        _dateViewModel.MonthNumber = DateTime.Now.Month;
        _dateViewModel.YearNumber = DateTime.Now.Year;

        await OnSeletedDateChanged();
    }

    private async Task SetSchedule()
    {
        await GetMonthDays();
        await GetSchedule();

        if (_schedule.QuarterId != _quarter.QuarterId)
        {
            await SetQuarter();
        }
    }

    private async Task SetQuarter()
    {
        await GetUpsertQuarter();
        await GetMorningShifts();
    }

    private async Task GetUpsertQuarter()
    {
        var request = new UpsertQuarterRequest
            {
                Month = _dateViewModel.MonthNumber,
                Year = _dateViewModel.YearNumber,
                DepartamentId = base.CurrentDepartamentStore.CurrentDepartament.DepartamentId,
            };
        var response = await _mediatr.Send(request);

        _quarter = _mapper.Map<QuarterViewModel>(response);
    }

    private async Task GetNurses()
    {
        var request = new GetNursesFromDepartamentRequest()
            {
                DepartamentId = base.CurrentDepartamentStore.CurrentDepartament.DepartamentId,
                IncludeDeleted = true,
            };
        var response = await _mediatr.Send(request);

        _nurses = _mapper.Map<IEnumerable<NurseViewModel>>(response);
    }

    private async Task GetSchedule()
    {
        var request = new GetScheduleRequest
            {
                Month = _dateViewModel.MonthNumber,
                Year = _dateViewModel.YearNumber,
                DepartamentId = base.CurrentDepartamentStore.CurrentDepartament.DepartamentId,
            };
        var response = await _mediatr.Send(request);

        _schedule = _mapper.Map<ScheduleViewModel>(response);
    }

    private async Task GetMonthDays()
    {
        var request = new GetMonthDaysRequest
            {
                Month = _dateViewModel.MonthNumber,
                Year = _dateViewModel.YearNumber,
            };
        var response = await _mediatr.Send(request);

        _days = _mapper.Map<IEnumerable<DayViewModel>>(response);
    }

    private async Task GetMorningShifts()
    {
        var request = new GetMorningShiftsRequest
            {
                QuarterId = _quarter.QuarterId,
            };
        var response = await _mediatr.Send(request);

        _morningShifts = _mapper.Map<IEnumerable<MorningShiftViewModel>>(response);
    }

    private async Task InitializeSolverSettings()
    {
        var request = new GetDepartamentSettingsRequest
            {
                DepartamentId = base.CurrentDepartamentStore.CurrentDepartament.DepartamentId,
            };
        var response = await _mediatr.Send(request);

        var settings = _mapper.Map<DepratamentSettingsViewModel>(response);

        _solverSettings = new SolverSettingsViewModel(settings.DefaultGeneratorRetryValue);
    }
}