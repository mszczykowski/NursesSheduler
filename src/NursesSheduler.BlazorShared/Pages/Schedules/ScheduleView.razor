@page "/scheduleView"

@using NursesScheduler.BlazorShared.Pages.Schedules.Controls
@using NursesScheduler.BusinessLogic.CommandsAndQueries.MorningShifts.Commands
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Nurses.Queries.GetNursesFromDepartament
@using NursesScheduler.BusinessLogic.CommandsAndQueries.Schedules.Queries.GetSchedule

@inherits ComponenentUsingDepartament

@inject IMediator _mediatr;
@inject IMapper _mapper;

<MorningShiftsSettingsModal @ref="_morningShiftsSettingsModal" Recalculate="CalculateMorningShifts" Save="SaveMorningShifts"/>
<SolverSettingsModal @ref="_solverSettingsModal" Save="SaveSolverSettings"/>

@if (_schedule == null || _isLoading)
{
    <LoadingSpinner />
}
else
{
    <div class="container is-fluid">
        <div class="level">
            <div class="level-left">
                <div class="level-item">
                    <a @onclick="(() => _morningShiftsSettingsModal.SetModal(_schedule.MorningShifts, _schedule.TimeForMorningShifts))">Konfiguracja ranków</a>
                </div>
                <div class="level-item">
                    <a @onclick="(() => _solverSettingsModal.SetModal(_generatorSeed, _numberOfReties))">Konfiguracja generatora</a>
                </div>
                <div class="level-item">
                    <a>Drukuj</a>
                </div>
            </div>
        </div>
        <div class="level">
            <div class="level-left">
                <div class="level-item">
                    <label class="label">Miesiąc</label>
                </div>
                <div class="level-item">
                    <MonthSelect MonthViewModel=_dateViewModel OnChange="ReloadSchedule"/>
                </div>
                <div class="level-item">
                    <label class="label">Rok</label>
                </div>
                <div class="level-item">
                    <YearSelect YearViewModel=_dateViewModel FirstYear=CurrentDepartamentStore.CurrentDepartament.CreationYear OnChange="ReloadSchedule"/>
                </div>
                <div class="level-item">
                    <button class="button is-info" @onclick="(async () => await ReloadSchedule())">Bieżący miesiąc</button>
                </div>
            </div>


            <div class="level-right">
                <div class="level-item">
                    <p class="control">
                        <a class="button is-info">
                            <span class="icon">
                                <i class="fas fa-check" aria-hidden="true"></i>
                            </span>
                            <span>Sprawdź</span>
                        </a>
                    </p>
                </div>
                <div class="level-item">
                    <p class="control">
                        <a class="button is-danger">
                            <span class="icon">
                                <i class="fas fa-xmark" aria-hidden="true"></i>
                            </span>
                            <span>Wyczyść</span>
                        </a>
                    </p>
                </div>
                <div class="level-item">
                    <p class="control">
                        <a class="button is-warning">
                            <span class="icon">
                                <i class="fas fa-wand-magic-sparkles" aria-hidden="true"></i>
                            </span>
                            <span>Generuj</span>
                        </a>
                    </p>
                </div>
                <div class="level-item">
                    <p class="control">
                        <a class="button is-success">
                            <span class="icon">
                                <i class="far fa-floppy-disk" aria-hidden="true"></i>
                            </span>
                            <span>Zapisz</span>
                        </a>
                    </p>
                </div>
            </div>
        </div>

        <div class="level">
            <div class="level-left">
                <div class="level-item">
                    <p>
                        <b>Kwartał:</b> @_schedule.QuarterNumber
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Norma:</b> @_schedule.WorkTimeInMonth.GetTotalHoursAndMinutes()
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Czas w kwartale:</b> @_schedule.WorkTimeInQuarter.GetTotalHoursAndMinutes()
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Nadwyżka czasu pracy:</b> @_schedule.TimeOffAvailableToAssgin.GetTotalHoursAndMinutes()
                    </p>
                </div>
                <div class="level-item">
                    <p>
                        <b>Przydzielony urlop:</b> @_schedule.TimeOffAssigned.GetTotalHoursAndMinutes()
                    </p>
                </div>
            </div>
            <div class="level-right">
                <p><b>Zapisano!</b></p>
            </div>
        </div>
    </div>

    <ScheduleTable MonthDays=_schedule.MonthDays ScheduleNurses=_schedule.ScheduleNurses MorningShifts=_schedule.MorningShifts/>
}


@code {
    private MorningShiftsSettingsModal _morningShiftsSettingsModal;
    private SolverSettingsModal _solverSettingsModal;
    private ScheduleViewModel _schedule;
    private QuarterViewModel _quarter;
    private IEnumerable<DayViewModel> _days;
    private IEnumerable<NurseViewModel> _nurses;

    private int _numberOfReties;
    private string _generatorSeed;

    private DateViewModel _dateViewModel = new DateViewModel
        {
            YearNumber = DateTime.Now.Year,
            MonthNumber = DateTime.Now.Month,
        };

    private bool _isLoading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await GetSchedule();
        }
    }

    private async Task ReloadSchedule()
    {
        _isLoading = true;
        await Task.Delay(1);
        await GetSchedule();
    }

    private async Task SelectedMonthChanged(ChangeEventArgs e)
    {
        _dateViewModel.MonthNumber = Int32.Parse(e.Value.ToString());
        await GetSchedule();
    }

    private async Task LoadData()
    {
        try
        {

        }
        catch(Exception e)
        {
            base.HandleException(e);
        }
    }

    private async Task GetSchedule()
    {
        try
        {
            var request = new GetScheduleRequest
                {
                    Month = _dateViewModel.MonthNumber,
                    Year = _dateViewModel.YearNumber,
                    DepartamentId = base.CurrentDepartamentStore.CurrentDepartament.DepartamentId,
                };
            var response = await _mediatr.Send(request);

            _schedule = _mapper.Map<ScheduleViewModel>(response);
            _isLoading = false;
            StateHasChanged();
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }

    private void InitialiseSchedule()
    {

    }

    private void LoadSchedule(GetScheduleResponse response)
    {

    }

    private void SaveMorningShifts(MorningShiftsEditViewModel morningShiftsEditViewModel)
    {
        _schedule.MorningShifts = morningShiftsEditViewModel.MorningShifts;
    }

    private async Task CalculateMorningShifts(MorningShiftsEditViewModel morningShiftsEditViewModel)
    {
        try
        {
            var request = new CalculateMorningShiftsRequest
                {
                    TimeForMorningShifts = _schedule.TimeForMorningShifts,
                    DepartamentId = base.CurrentDepartamentStore.CurrentDepartament.DepartamentId,
                };
            var response = await _mediatr.Send(request);

            morningShiftsEditViewModel.MorningShifts = _mapper.Map<MorningShiftViewModel[]>(response);
        }
        catch (Exception e)
        {
            base.HandleException(e);
        }
    }

    private void SaveSolverSettings(SolverSettingsViewModel solverSettingsViewModel)
    {
        _numberOfReties = solverSettingsViewModel.NumberOfRetries;
        _generatorSeed = solverSettingsViewModel.GeneratorSeed;
    }
}